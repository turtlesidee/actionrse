// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

// --------------------------------------

model User {
  id             Int            @id @default(autoincrement())
  firstname      String
  lastname       String
  email          String         @unique
  hashedPassword String?
  role           String         @default("USER")
  avatar_url     String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  tokens         Token[]
  sessions       Session[]
  companies      CompanyUsers[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

model Company {
  id        Int            @id @default(autoincrement())
  name      String
  address   String
  createdAt String
  naf       String
  siret     String         @unique
  users     CompanyUsers[]
  missions  Mission[]
}

model CompanyUsers {
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  company   Company @relation(fields: [companyId], references: [id])
  companyId Int

  @@id([userId, companyId])
}

model Mission {
  id                  Int     @id @default(autoincrement())
  company             Company @relation(fields: [companyId], references: [id])
  companyId           Int
  type                String
  public              String
  status              String @default("definition")
  step                Int    @default(1)
  stakeholders        RseStakeholder[]
  stakeholders_choosen RseStakeholderChoosen[]
  identifications     RseIdentification[]
  inventory           RseInventory[]
  rse_quizz_stakehokder   RseQuizzStakeholder[]
  rse_quizz           RseQuizz[]
  rse_maturity_assessment RseMaturityAssessment[]
}

model RseStakeholder {
  id         Int    @id @default(autoincrement())
  missionId  Int
  name       String
  email      String
  importance Int
  influence  Int
  support    Int
  state     String @default("intern")
  chosen  RseStakeholderChoosen[]
  quizz   RseQuizzStakeholder[]
  mission Mission @relation(fields: [missionId], references: [id])
}

model RseIdentification {
    mission           Mission @relation(fields: [missionId], references: [id], map: "identification")
    missionId         Int
    value             String
    type              String

    @@unique([missionId, value, type])
}

model RseInventory {
    mission           Mission @relation(fields: [missionId], references: [id], map: "inventory")
    missionId         Int
    value             String
    type              String

    @@unique([missionId, value, type])
}

model RseMaturityAssessmentQuestion {
    id                Int @id @default(autoincrement())
    label             String
    responseA         String
    responseB         String
    responseC         String
    responseD         String
    valueA            Int
    valueB            Int
    valueC            Int
    valueD            Int
    type              String

    rse_maturity_assessment RseMaturityAssessment[]
}

model RseMaturityAssessment {
    mission           Mission @relation(fields: [missionId], references: [id], map: "maturity")
    missionId         Int
    question          RseMaturityAssessmentQuestion @relation(fields: [questionId], references: [id])
    questionId        Int
    value             Int
    type              String

    @@unique([missionId, questionId])
}

model RseQuizzQuestion {
    id                Int @id @default(autoincrement())
    label             String
    responseA         String
    responseB         String
    responseC         String
    responseD         String
    valueA            Int
    valueB            Int
    valueC            Int
    valueD            Int
    type              String
    subtype           Int
    rse_quizz             RseQuizz[]
    rse_quizz_stakeholder RseQuizzStakeholder[]
}

model RseStakeholderChoosen {
    mission           Mission @relation(fields: [missionId], references: [id])
    missionId         Int
    stakeholder       RseStakeholder @relation(fields: [stakeholderId], references: [id])
    stakeholderId     Int
    status           String
    public_id        String

    @@unique([missionId, stakeholderId])
}

model RseQuizzStakeholder {
    mission           Mission @relation(fields: [missionId], references: [id], map: "quizz_stakeholder")
    missionId         Int
    question          RseQuizzQuestion @relation(fields: [questionId], references: [id])
    questionId        Int
    stakeholder       RseStakeholder @relation(fields: [stakeholderId], references: [id])
    stakeholderId     Int
    value             Int
    type              String

    @@unique([missionId, questionId, stakeholderId])
}

model RseQuizz {
    mission           Mission @relation(fields: [missionId], references: [id], map: "quizz_stakeholder")
    missionId         Int
    question          RseQuizzQuestion @relation(fields: [questionId], references: [id])
    questionId        Int
    value             Int
    type              String

    @@unique([missionId, questionId])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql
// enum TokenType {
//   RESET_PASSWORD
// }
